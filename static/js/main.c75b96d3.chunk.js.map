{"version":3,"sources":["Project/alghorithms/dfs.js","Project/alghorithms/dijkstra.js","Project/Visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","row","col","isEnter","isExit","isWall","predecessor","undefined","distance","Infinity","this","x","y","flag","visited","path","alg","nodes","push","pop","dfs","cells","rows","cols","startRow","startCol","i","j","type","console","log","shift","dijkstra","startX","startY","queue","length","l","t","unshift","Cell","enterRow","enterCol","exitRow","exitCol","isMousePressed","isWorking","isClearNeeded","paintType","changePaintType","s","document","getElementById","className","clearGrid","onMouseDown","changeEnter","changeExit","animateVisited","ids","a","time","Promise","res","setTimeout","animatePath","value","Visualizer","props","currentRow","setState","id","onClick","src","htmlFor","name","visualize","map","r","c","onMouseUp","onMouseEnter","toString","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c75b96d3.chunk.js","sourcesContent":["class Node {\r\n  isEnter = false;\r\n  isExit = false;\r\n  isWall = false;\r\n  x;\r\n  y;\r\n  predecessor = undefined;\r\n  distance = Infinity;\r\n  constructor(row, col) {\r\n    this.x = col;\r\n    this.y = row;\r\n    this.isExit = false;\r\n    this.isWall = false;\r\n  }\r\n}\r\n\r\nlet flag = false;\r\nlet visited = [];\r\nlet path = [];\r\n\r\nfunction alg(nodes, y, x) {\r\n  if (nodes[y][x].isExit) {\r\n    path.push(`[${y - 1}, ${x - 1}]`);\r\n    flag = true;\r\n    return;\r\n  }\r\n  nodes[y][x].isWall = true;\r\n  visited.push(`[${y - 1}, ${x - 1}]`);\r\n  path.push(`[${y - 1}, ${x - 1}]`);\r\n  if (!flag && !nodes[y][x + 1].isWall) {\r\n    alg(nodes, y, x + 1);\r\n  }\r\n  if (!flag && !nodes[y + 1][x].isWall) {\r\n    alg(nodes, y + 1, x);\r\n  }\r\n  if (!flag && !nodes[y][x - 1].isWall) {\r\n    alg(nodes, y, x - 1);\r\n  }\r\n  if (!flag && !nodes[y - 1][x].isWall) {\r\n    alg(nodes, y - 1, x);\r\n  }\r\n  if (!flag) {\r\n    path.pop();\r\n  }\r\n  return;\r\n}\r\n\r\nexport default function dfs(cells, rows, cols) {\r\n  flag = false;\r\n  visited = [];\r\n  path = [];\r\n  let nodes = [];\r\n  let startRow, startCol;\r\n  for (let i = 0; i < rows + 2; ++i) {\r\n    let row = [];\r\n    for (let j = 0; j < cols + 2; ++j) {\r\n      row.push(new Node(i, j));\r\n      if (i === 0 || i === rows + 1 || j === 0 || j === cols + 1) {\r\n        row[j].isWall = true;\r\n      } else {\r\n        switch (cells[i - 1][j - 1].type) {\r\n          case \"wall\":\r\n            row[j].isWall = true;\r\n            break;\r\n          case \"enter\":\r\n            row[j].isEnter = true;\r\n            startRow = i;\r\n            startCol = j;\r\n            console.log(startCol, startRow);\r\n            row[j].isWall = false;\r\n            break;\r\n          case \"exit\":\r\n            row[j].isExit = true;\r\n            row[j].isWall = false;\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n    }\r\n    nodes.push(row);\r\n  }\r\n  console.log(nodes);\r\n  alg(nodes, startRow, startCol);\r\n  path.shift();\r\n  return [visited, path];\r\n}\r\n","class Node {\r\n  isEnter = false;\r\n  isExit = false;\r\n  isWall = false;\r\n  x;\r\n  y;\r\n  predecessor = undefined;\r\n  distance = Infinity;\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n\r\nfunction alg(nodes, startX, startY) {\r\n  let queue = [];\r\n  let visited = [];\r\n  queue.push(nodes[startX][startY]);\r\n  nodes[startX][startY].isWall = true;\r\n  while (queue.length > 0) {\r\n    const l = queue.length;\r\n    for (let i = 0; i < l; ++i) {\r\n      let t = queue.shift();\r\n      if (nodes[t.x][t.y].isExit === true) {\r\n        let path = [];\r\n        while (t.predecessor !== undefined) {\r\n          path.unshift(`[${t.x - 1}, ${t.y - 1}]`);\r\n          t = t.predecessor;\r\n        }\r\n        //console.log(path);\r\n        return [visited, path];\r\n      }\r\n      visited.push(`[${t.x - 1}, ${t.y - 1}]`);\r\n      if (!nodes[t.x - 1][t.y].isWall) {\r\n        queue.push(nodes[t.x - 1][t.y]);\r\n        nodes[t.x - 1][t.y].predecessor = t;\r\n        nodes[t.x - 1][t.y].isWall = true;\r\n      }\r\n      if (!nodes[t.x][t.y - 1].isWall) {\r\n        queue.push(nodes[t.x][t.y - 1]);\r\n        nodes[t.x][t.y - 1].predecessor = t;\r\n        nodes[t.x][t.y - 1].isWall = true;\r\n      }\r\n      if (!nodes[t.x + 1][t.y].isWall) {\r\n        queue.push(nodes[t.x + 1][t.y]);\r\n        nodes[t.x + 1][t.y].predecessor = t;\r\n        nodes[t.x + 1][t.y].isWall = true;\r\n      }\r\n      if (!nodes[t.x][t.y + 1].isWall) {\r\n        queue.push(nodes[t.x][t.y + 1]);\r\n        nodes[t.x][t.y + 1].predecessor = t;\r\n        nodes[t.x][t.y + 1].isWall = true;\r\n      }\r\n    }\r\n  }\r\n  return [visited, []];\r\n}\r\n\r\nexport default function dijkstra(cells, rows, cols) {\r\n  let nodes = [];\r\n  let startX, startY;\r\n  for (let i = 0; i < rows + 2; ++i) {\r\n    let row = [];\r\n    for (let j = 0; j < cols + 2; ++j) {\r\n      row.push(new Node(i, j));\r\n      if (i === 0 || i === rows + 1 || j === 0 || j === cols + 1) {\r\n        row[j].isWall = true;\r\n      } else {\r\n        switch (cells[i - 1][j - 1].type) {\r\n          case \"wall\":\r\n            row[j].isWall = true;\r\n            break;\r\n          case \"enter\":\r\n            row[j].isEnter = true;\r\n            startX = i;\r\n            startY = j;\r\n            break;\r\n          case \"exit\":\r\n            row[j].isExit = true;\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n    }\r\n    nodes.push(row);\r\n  }\r\n  console.log(nodes);\r\n  return alg(nodes, startX, startY);\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Visualizer.css\";\r\nimport dfs from \"./alghorithms/dfs\";\r\nimport dijkstra from \"./alghorithms/dijkstra\";\r\n\r\nclass Cell {\r\n  type = \"\";\r\n  constructor() {\r\n    this.type = \"default\";\r\n  }\r\n}\r\n\r\nconst rows = 80;\r\nconst cols = 80;\r\n\r\nlet enterRow = 10;\r\nlet enterCol = 10;\r\nlet exitRow = 10;\r\nlet exitCol = 30;\r\n\r\nconst cells = [];\r\nlet isMousePressed = false;\r\nlet isWorking = false;\r\nlet isClearNeeded = false;\r\nlet paintType = \"wall\";\r\n\r\nfunction changePaintType(s) {\r\n  paintType = s;\r\n  document.getElementById(\"paint-enter\").className = \"paint-button\";\r\n  document.getElementById(\"paint-exit\").className = \"paint-button\";\r\n  document.getElementById(\"paint-wall\").className = \"paint-button\";\r\n  document.getElementById(\"paint-\" + s).className = \"paint-button-active\";\r\n}\r\n\r\nfunction changeEnter(row, col) {\r\n  if (cells[row][col].type !== \"exit\") {\r\n    cells[enterRow][enterCol].type = \"default\";\r\n    document.getElementById(`[${enterRow}, ${enterCol}]`).className =\r\n      \"cell default\";\r\n  } else {\r\n    cells[enterRow][enterCol].type = \"exit\";\r\n    document.getElementById(`[${enterRow}, ${enterCol}]`).className =\r\n      \"cell exit\";\r\n    exitRow = enterRow;\r\n    exitCol = enterCol;\r\n  }\r\n  cells[row][col].type = \"enter\";\r\n  document.getElementById(`[${row}, ${col}]`).className = \"cell enter\";\r\n  enterRow = row;\r\n  enterCol = col;\r\n}\r\n\r\nfunction changeExit(row, col) {\r\n  if (cells[row][col].type !== \"enter\") {\r\n    cells[exitRow][exitCol].type = \"default\";\r\n    document.getElementById(`[${exitRow}, ${exitCol}]`).className =\r\n      \"cell default\";\r\n  } else {\r\n    cells[exitRow][exitCol].type = \"enter\";\r\n    document.getElementById(`[${exitRow}, ${exitCol}]`).className =\r\n      \"cell enter\";\r\n    enterRow = exitRow;\r\n    enterCol = exitCol;\r\n  }\r\n  cells[row][col].type = \"exit\";\r\n  document.getElementById(`[${row}, ${col}]`).className = \"cell exit\";\r\n  exitRow = row;\r\n  exitCol = col;\r\n}\r\n\r\nfunction clearGrid() {\r\n  for (let i = 0; i < rows; ++i) {\r\n    for (let j = 0; j < cols; ++j) {\r\n      let t = document.getElementById(`[${i}, ${j}]`);\r\n      if (t.className === \"cell visited\" || t.className === \"cell path\") {\r\n        t.className = \"cell default\";\r\n      }\r\n    }\r\n  }\r\n  isClearNeeded = false;\r\n}\r\n\r\nfunction onMouseDown(row, col) {\r\n  if (!isWorking) {\r\n    if (isClearNeeded) {\r\n      clearGrid();\r\n    }\r\n    if (paintType === \"wall\") {\r\n      if (cells[row][col].type === \"default\") {\r\n        cells[row][col].type = \"wall\";\r\n      } else if (cells[row][col].type === \"wall\") {\r\n        cells[row][col].type = \"default\";\r\n      }\r\n      document.getElementById(`[${row}, ${col}]`).className =\r\n        \"cell \" + cells[row][col].type;\r\n      isMousePressed = true;\r\n    } else if (paintType === \"enter\") {\r\n      changeEnter(row, col);\r\n    } else if (paintType === \"exit\") {\r\n      changeExit(row, col);\r\n    }\r\n  }\r\n}\r\n\r\nfunction onMouseUp() {\r\n  isMousePressed = false;\r\n}\r\n\r\nfunction onMouseEnter(row, col) {\r\n  if (isMousePressed === true && !isWorking && paintType === \"wall\") {\r\n    if (cells[row][col].type === \"default\") {\r\n      cells[row][col].type = \"wall\";\r\n    } else if (cells[row][col].type === \"wall\") {\r\n      cells[row][col].type = \"default\";\r\n    }\r\n    document.getElementById(`[${row}, ${col}]`).className =\r\n      \"cell \" + cells[row][col].type;\r\n  }\r\n}\r\n\r\nasync function animateVisited(ids) {\r\n  let time = 5;\r\n  if (ids.length < 20) {\r\n    time = 200;\r\n  } else if (ids.length < 40) {\r\n    time = 100;\r\n  } else if (ids.length < 80) {\r\n    time = 50;\r\n  } else if (ids.length < 140) {\r\n    time = 25;\r\n  }\r\n\r\n  for (let i = 1; i < ids.length; ++i) {\r\n    document.getElementById(`${ids[i]}`).className = \"cell visited\";\r\n    await new Promise((res) => setTimeout(res, time));\r\n  }\r\n}\r\n\r\nasync function animatePath(ids) {\r\n  let time = 20;\r\n  if (ids.length > 1000) {\r\n    time = 15;\r\n  }\r\n  if (ids.length > 2500) {\r\n    time = 10;\r\n  }\r\n  for (let i = 0; i < ids.length - 1; ++i) {\r\n    document.getElementById(`${ids[i]}`).className = \"cell path\";\r\n    await new Promise((res) => setTimeout(res, time));\r\n  }\r\n  isWorking = false;\r\n}\r\n\r\nasync function visualize() {\r\n  if (!isWorking) {\r\n    if (isClearNeeded) {\r\n      clearGrid();\r\n    }\r\n    isClearNeeded = true;\r\n    isWorking = true;\r\n    let visited = [];\r\n    let path = [];\r\n    switch (document.getElementById(\"alghorithms\").value) {\r\n      case \"dijkstra\":\r\n        [visited, path] = await dijkstra(cells, rows, cols);\r\n        break;\r\n      case \"dfs\":\r\n        [visited, path] = await dfs(cells, rows, cols);\r\n        break;\r\n      default:\r\n    }\r\n    await animateVisited(visited);\r\n    await animatePath(path);\r\n    isWorking = false;\r\n  }\r\n}\r\n\r\nexport default class Visualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    for (let row = 0; row < rows; ++row) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < cols; ++col) {\r\n        currentRow.push(new Cell());\r\n      }\r\n      cells.push(currentRow);\r\n    }\r\n    cells[enterRow][enterCol].type = \"enter\";\r\n    cells[exitRow][exitCol].type = \"exit\";\r\n    this.setState(cells);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"menu\">\r\n          <div className=\"menu-column\">\r\n            <button\r\n              className=\"paint-button\"\r\n              id=\"paint-enter\"\r\n              onClick={() => changePaintType(\"enter\")}\r\n            >\r\n              <img className=\"img\" src=\"assets/green.bmp\"></img>\r\n              <p className=\"text\">Точка начала</p>\r\n            </button>\r\n            <br></br>\r\n            <button\r\n              className=\"paint-button\"\r\n              id=\"paint-exit\"\r\n              onClick={() => changePaintType(\"exit\")}\r\n            >\r\n              <img className=\"img\" src=\"assets/gold.bmp\"></img>\r\n              <p className=\"text\">Точка конца</p>\r\n            </button>\r\n            <br></br>\r\n            <button\r\n              className=\"paint-button-active\"\r\n              id=\"paint-wall\"\r\n              onClick={() => changePaintType(\"wall\")}\r\n            >\r\n              <img className=\"img\" src=\"assets/gray.bmp\"></img>\r\n              <p className=\"text\">Стена</p>\r\n            </button>\r\n          </div>\r\n          <div className=\"menu-column\">\r\n            <label htmlFor=\"alghorithms\">Выберите алгоритм: </label>\r\n            <br></br>\r\n            <select id=\"alghorithms\" name=\"alghorithms\">\r\n              <option value=\"dijkstra\">Алгоритм Дейкстры</option>\r\n              <option value=\"dfs\">Поиск в длину</option>\r\n              <option value=\"A*\">A-star</option>\r\n            </select>\r\n            <br></br>\r\n            <button onClick={() => visualize()}>Запуск</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {cells.map((r, row) => {\r\n            return (\r\n              <div className=\"row\" key={row.toString()}>\r\n                {r.map((c, col) => (\r\n                  <div\r\n                    className={\"cell \" + cells[row][col].type}\r\n                    id={`[${row}, ${col}]`}\r\n                    onMouseDown={() => onMouseDown(row, col)}\r\n                    onMouseUp={() => onMouseUp()}\r\n                    onMouseEnter={() => onMouseEnter(row, col)}\r\n                    key={`${row}, ${col}`}\r\n                  ></div>\r\n                ))}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport Visualizer from \"./Project/Visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}